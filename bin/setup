#!/usr/bin/env ruby
require "pathname"
require "rake"

include FileUtils

ENV["RAILS_ENV"]               ||= ENV["PASSENGER_APP_ENV"] || "development"
ENV["RAILS_RELATIVE_URL_ROOT"] ||= ENV["PASSENGER_BASE_URI"]

def cat(source, target)
  source = Array(source).select {|f| File.file?(f)}
  if source.empty?
    puts "No site/portal specific files found for #{target}"
  else
    source_files = source.join(" ")
    unless system("cat #{source_files} | cmp -s - #{target}")
      sh "cat #{source_files} > #{target}"
    else
      puts "No changes detected for #{source.join(", ")} => #{target}"
    end
  end
end

# define application object
class App
  attr_accessor :env, :url, :site, :portal

  def initialize(env:, url:, site:, portal:)
    @env    = env
    @url    = url
    @site   = site
    @portal = portal
  end

  def production?
    env == "production"
  end
end

# set application settings
APP = App.new(
  env:    ENV["RAILS_ENV"],
  url:    ENV["RAILS_RELATIVE_URL_ROOT"],
  site:   ENV["OOD_SITE"],
  portal: ENV["OOD_PORTAL"]
)

# path to your application root.
APP_ROOT = Pathname.new File.expand_path("../../",  __FILE__)

chdir APP_ROOT do
  # This script is a starting point to setup your application.
  # Add necessary setup steps to this file:

  # Read in OOD_SITE and OOD_PORTAL if defined in .env.local
  if File.exist?(".env.local")
    unless APP.site
      tmp = `bash -c 'source .env.local && echo $OOD_SITE'`.strip
      APP.site = tmp unless tmp.empty?
    end

    unless APP.portal
      tmp = `bash -c 'source .env.local && echo $OOD_PORTAL'`.strip
      APP.portal = tmp unless tmp.empty?
    end
  end

  # Read in RAILS_RELATIVE_URL_ROOT if defined in .env.production
  if APP.production? && File.exist?(".env.production")
    unless APP.url
      tmp = `bash -c 'source .env.production && echo $RAILS_RELATIVE_URL_ROOT'`.strip
      APP.url = tmp unless tmp.empty?
    end
  end

  puts "\n== Building Dashboard App =="
  puts "RAILS_ENV               = #{APP.env}"
  puts "RAILS_RELATIVE_URL_ROOT = #{APP.url    || "not set"}"
  puts "OOD_SITE                = #{APP.site   || "not set (default: none)"}"
  puts "OOD_PORTAL              = #{APP.portal || "not set (default: none)"}"

  unless system("bin/bundle check &> /dev/null")
    puts "\n== Installing dependencies =="
    sh "bin/bundle install --path=vendor/bundle"
    sh "bin/bundle clean"
  end

  if APP.site
    puts "\n== Enabling site and portal specific settings =="

    # .env.local
    target_file = ".env.local"
    if APP.site == ""       # user wants to unset site settings
      rm_f target_file
    elsif APP.portal == ""  # user wants to unset portal settings
      source_file = ".env.local.#{APP.site}"
      cat source_file, target_file
    else
      source_files = [".env.local.#{APP.site}", ".env.local.#{APP.site}.#{APP.portal}"]
      cat source_files, target_file
    end

    # config/initializers/ood.rb
    target_file = "config/initializers/ood.rb"
    if APP.site == "" || APP.portal == "" # user wants to unset site/portal settings
      rm_f target_file
    else
      source_file = "config/initializers/ood.rb.#{APP.site}.#{APP.portal}"
      cat source_file, target_file
    end

    # config/initializers/fix_batch_connect_dataroot.rb
    target_file = "config/initializers/fix_batch_connect_dataroot.rb"
    if APP.site == "" # user wants to unset site settings
      rm_f target_file
    else
      source_file = "config/initializers/fix_batch_connect_dataroot.rb.#{APP.site}"
      cat source_file, target_file
    end
  end

  if APP.production?
    puts "\n== Compiling assets =="
    sh "bin/rake assets:clobber"
    sh "bin/rake assets:precompile"
  end

  puts "\n== Removing old logs and tempfiles =="
  sh "bin/rake log:clear tmp:clear"

  puts "\n== Restarting application server =="
  touch "tmp/restart.txt"
  puts ""
end
